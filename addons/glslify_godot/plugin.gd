tool
extends EditorPlugin

var dir_watcher_script = preload("res://addons/glslify_godot/DirWatcher.gd")
onready var dir_watcher = dir_watcher_script.new()

const PLUGIN_NAME = "glslify-godot"

const INCOMING_DIR = "res://shaders"
const TARGET_DIR = "res://compiled_shaders"

func _ready():
	var dir = Directory.new()
	dir.make_dir(TARGET_DIR)
	dir.make_dir(INCOMING_DIR)

	add_child(dir_watcher)
	dir_watcher.set_directory(INCOMING_DIR)
	if(OS.execute("npm", ["add","-G", "glslify"])) != OK: return
	dir_watcher.connect("file_changed", self, "_on_file_changed")
	dir_watcher.set_watching(true)

func _on_file_changed(file_path):
	var target_path = file_path.replace(INCOMING_DIR, TARGET_DIR).replace("res://", "./").replace(".glsl", ".shader")

	if (OS.execute("npx", ["glslify", file_path.replace("res://", "./"), "-o", target_path])) != OK:
		printerr("glslify failed!")
		return

	if (OS.execute("sed", ["/^#/d", "-i", target_path.replace("res://", "./")])) != OK:
		printerr("failed removing preprocessor declarations!")
		return

	var header = "/* * \n ** This file is automatically generated from glslify-godot. \n ** Do not edit this file. \n **  \n ** Date: %s \n * */ \n" % Time.get_datetime_string_from_system()

	var file = File.new()
	if (file.open(target_path, File.READ_WRITE) != OK):
		printerr("failed opening file %s" % target_path)
		return
	var text = file.get_as_text()
	file.seek(0)
	file.store_string(header + text)
	file.close()

	var shader = ResourceLoader.load(target_path)
	shader.emit_changed()

